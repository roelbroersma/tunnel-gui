#!/usr/bin/bash

if [ "$EUID" -gt 0 ]
  then echo "Please run this script as root, it will create a folder and install required Python libraries."
  exit
fi


BASE_DIR="/usr/bin/tunnel-gui/"
DOWNLOAD_URL="https://github.com/roelbroersma/tunnel-gui/archive/main.zip"

#Check for DIETPI
if [[ $(uname -a) == *DietPi* ]] || [[ -f /boot/dietpi/.version ]]; then
    DIETPI_DETECTED=True
fi

# MULTI-PLATFORM REQUIREMENTS INSTALLER
install_packages() {
  if [[ ${DIETPI_DETECTED} == True ]]; then
    echo "Detected DietPi, using dietpi-software to install Packages..."
    /boot/dietpi/dietpi-software install 130 #PYTHON3 AND PIP
    /boot/dietpi/dietpi-software install 97 # openVPN
    /boot/dietpi/dietpi-software install 152 # Avahi-Daemon
    echo;
    echo "Install additional small packages using apt-get if not already installed..."
    apt-get install -y zip unzip sed mawk grep easy-rsa python3-pip
  elif command -v apt-get > /dev/null 2>&1; then
    echo "Using apt-get to install Packages..."
    apt-get update
    apt-get install -y zip unzip wget sed mawk grep openssl openvpn easy-rsa python3 python3-pip
  elif command -v yum > /dev/null 2>&1; then
    echo "Using yum to install Packages..."
    yum makecache -y
    yum -y install zip unzip wget sed mawk openssl grep openvpn easy-rsa python3 python3-pip
  elif command -v dnf > /dev/null 2>&1; then
    echo "Using dnf to install Packages..."
    dnf makecache -y
    dnf -y install zip unzip wget sed mawk openssl grep openvpn easy-rsa python3 python3-pip
  else
    echo "No known package manager found, exiting."
    exit 1
  fi
}

echo "Install required Software packages."
install_packages
echo;

echo "Stopping OpenVPN service since it will probably be started after installation."
systemctl disable openvpn@server.service
echo;

echo "Installing Python Packages."
pip install -r https://raw.githubusercontent.com/roelbroersma/tunnel-gui/main/requirements.txt 
echo;

echo "Downloading and Unpacking latest Tunnel GUI Software."
cd /tmp
mkdir -p ${BASE_DIR}temp
wget ${DOWNLOAD_URL} -O "${BASE_DIR}temp/tunnel-gui-main.zip"
unzip -q -o ${BASE_DIR}/temp/tunnel-gui-main.zip -d ${BASE_DIR}/temp/
cd ${BASE_DIR}/temp/tunnel-gui-main
shopt -s dotglob
cp -R -f ./* ${BASE_DIR}
shopt -u dotglob
cd ${BASE_DIR}
rm -rf ${BASE_DIR}/temp/tunnel-gui-main*
echo;

if [[ ! -e web_password.txt ]]; then
    echo "Setting web password to: tunnel1"
    echo "Please change the default passwords immediately by changing the .env file and the web_password.txt file!";
    echo 'tunnel1' > web_password.txt;
else
    echo "We will not overwrite the password because a web_password.txt file already exists!";
fi

if [[ ! -e .env ]]; then
    echo "Generating .env file with random secret key..."
    (
	(echo 'SECRET_KEY='; head -c 80 /dev/random | base64) | tr -d [:cntrl:];
	echo ' #FLASK APP SECRET KEY WHICH IS USED FOR CROSS-SITE PROTECTION. YOU CAN CHANGE THIS AS YOU WISH.';
	echo 'DEBUG=False #FOR DEBUGGING PURPOSES (IF DEBUG=TRUE, IT WILL ONLY LISTEN TO 127.0.0.1)';
	echo 'PORT=8080 #PORT THE WEB GUI RUNS AT';
	echo 'SUPER_PASSWORD=VerySecretPassword';
	echo 'OPENVPN_STATUS_PATH=/var/openvpn/openvpn-status.log #SET THIS TO THE LOG PATH AS DEFINED IN THE OPENVPN CONFIG FILE.'
    ) > .env
    SECRET_KEY=really-long-string
DEBUG=False #FOR DEBUGGING PURPOSES (IF DEBUG=TRUE, IT WILL ONLY LISTEN TO 127.0.0.1)
PORT=8080 #PORT THE WEB GUI RUN AT
SUPER_PASSWORD=yourUsefulWebPassword
OPENVPN_STATUS_PATH=/var/log/openvpn/openvpn-status.log #SET THIS TO THE LOG PATH AS DEFINED IN openvpn's config file.

else
	echo "We will not create a .env file because one already exists!"
fi
echo;

echo "Creating OpenVPN Status File."
touch /var/log/tunnel-gui.log 
echo;

echo "Setting file permissions on scripts."
chmod -R +x scripts/
echo;

if [[ ${DIETPI_DETECTED} == True ]]; then
    echo "Copying DietPi-CloudShell config for small TFT display."
    cp dietpi/.dietpi-cloudshell /boot/dietpi/.dietpi-cloudshell
    echo;
    if ! grep -q "dtoverlay=rpi-display" /boot/config.txt; then
	echo "Enable small TFT display"
	echo -e "\n#------- Enable TFT SPI Display -------\ndtoverlay=rpi-display" >> /boot/config.txt
	echo;
    fi
fi

echo "Installing as a Service so it will run after rebooting or network restarts."
cp t1tunnel.service /etc/systemd/system/t1tunnel.service
systemctl daemon-reload
systemctl enable t1tunnel.service
systemctl start t1tunnel.service
echo;

echo "Succesfully installed the Tunneling GUI."
echo ;

if [[ ${DIETPI_DETECTED} == True ]]; then
	echo "System will reboot in 30 seconds, press CTRL-C to abort."
	sleep 30
	reboot
fi

