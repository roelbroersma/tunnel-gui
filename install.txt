#!/usr/bin/bash

if [ "$EUID" -gt 0 ]
  then echo "Please run this script as root, it will create a folder and install required Python libraries."
  exit
fi

#Check for DIETPI
if [[ $(uname -a) == *DietPi* -o ]] || [[ -f /DietPi/dietpi/.version ]]; then
    DIETPI_DETECTED=True
fi

# MULTI-PLATFORM REQUIREMENTS INSTALLER
install_packages() {
  if [[ ${DIETPI_DETECTED} == True ]]; then
    echo "Detected DietPi, using dietpi-software to install Packages..."
    dietpi-software install 130 #PYTHON3 AND PIP
    dietpi-software install 16 # openVPN
    dietpi-software install 152 # Avahi-Daemon
    apt-get install -y zip unzip sed mawk grep easy-rsa
  elif command -v apt-get > /dev/null 2>&1; then
    echo "Using apt-get to install Packages..."
    sudo apt-get update
    sudo apt-get install -y zip unzip wget sed mawk grep openssl openvpn easy-rsa python3
  elif command -v yum > /dev/null 2>&1; then
    echo "Using yum to install Packages..."
    sudo yum update -y
    sudo yum install -y zip unzip wget sed mawk openssl grep openvpn easy-rsa python3
  elif command -v dnf > /dev/null 2>&1; then
    echo "Using dnf to install Packages..."
    sudo dnf makecache --refresh
    sudo dnf install -y zip unzip wget sed mawk openssl grep openvpn easy-rsa python3
  else
    echo "No known package manager found, exiting."
    exit 1
  fi
}

echo "Install required Software packages"
install_packages

echo "Stopping OpenVPN service since it will probably be started after installation"
systemctl disable openvpn@server.service

echo "Installing Python Packages"
pip install -r https://raw.githubusercontent.com/roelbroersma/tunnel-gui/main/requirements.txt 

echo "Downloading and Unpacking latest Tunnel GUI Software"
cd /tmp
wget https://github.com/roelbroersma/tunnel-gui/archive/main.zip -O "/tmp/tunnel-gui-main.zip"
unzip -o /tmp/tunnel-gui-main.zip -d /tmp/
cp -R -f /tmp/tunnel-gui-main /usr/bin/tunnel-gui
rm -rf /tmp/tunnel-gui-main*
cd /usr/bin/tunnel-gui

if [[ ! -e web_password.txt ]]; then
    echo "Setting web password to: defaultpassword"
    echo "Please change the default passwords immediately by changing the .env file and the web_password.txt file!"
    echo 'tunnel1' > web_password.txt;
else
    echo "We will not overwrite the password because a web_password.txt file already exists!"
fi

if [[ ! -e .env ]]; then
    echo "Generating .env file with random secret key..."
    (
	(echo 'SECRET_KEY='; head -c 80 /dev/random | base64) | tr -d [:cntrl:];
	echo;
	echo 'DEBUG=False';
	echo 'SUPER_PASSWORD=VerySecretPassword';
	echo OPENVPN_STATUS_PATH=/var/log/tunnel-gui.log
    ) > .env
else
	echo "We will not create a .env file because one already exists!"
fi

echo "Creating OpenVPN Status File"
touch /var/log/tunnel-gui.log 

echo "Setting file permissions on scripts"
chmod -R +x scripts/

if [[ ${DIETPI_DETECTED} == True ]]; then
    echo "Copying DietPi-CloudShell config for small TFT display"
    cp dietpi/.dietpi-cloudshell /boot/dietpi/.dietpi-cloudshell
    if ! grep -q "dtoverlay=rpi-display" /boot/config.txt; then
	echo "Enable small TFT display"
	echo -e "\n#------- Enable TFT SPI Display -------\ndtoverlay=rpi-display" >> /boot/config.txt
    fi
fi

echo "Instaling as a Service so it will run after rebooting or network restarts"
cp t1tunnel.service /etc/systemd/system/t1tunnel.service
systemctl daemon-reload
systemctl enable t1tunnel.service
systemctl start t1tunnel.service

echo "Succesfully installed the Tunneling GUI."
echo ;

if [[ ${DIETPI_DETECTED} == True ]]; then
	echo "System will be rebooted in 30 seconds, press CTRL-C if you want to abort."
	sleep 30
	reboot
fi

